<?php
namespace Phossa\Logger;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-29 at 06:12:52.
 */
class LoggerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Logger
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Logger('phossa-log');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Phossa\Logger\Logger::getChannel
     */
    public function testGetChannel()
    {
        $this->assertEquals('phossa-log', $this->object->getChannel());
    }

    /**
     * @covers Phossa\Logger\Logger::setChannel
     */
    public function testSetChannel()
    {
        $this->object->setChannel('newChannel');
        $this->assertEquals('newChannel', $this->object->getChannel());
    }

    /**
     * @covers Phossa\Logger\Logger::setHandlers
     */
    public function testSetHandlers()
    {
        // callable
        $handlers = [
            new Handler\SyslogHandler(
                $this->object->getChannel(), LogLevel::ERROR
            ),
            function(LogEntryInterface $log) {
               $log->getMessage();
            }
        ];
        $this->object->setHandlers($handlers);
        $this->assertEquals(2, count($this->object->getHandlers()));
    }

    /**
     * not a callable
     *
     * @covers Phossa\Logger\Logger::setHandlers
     * @expectedExceptionCode Phossa\Logger\Message\Message::INVALID_LOG_HANDLER
     * @expectedException Phossa\Logger\Exception\InvalidArgumentException
     */
    public function testSetHandlers2()
    {
        // not callable
        $handlers = [
            'bingo'
        ];
        $this->object->setHandlers($handlers);
    }

    /**
     * @covers Phossa\Logger\Logger::addHandler
     */
    public function testAddHandler()
    {
        // add handler
        $handler = new Handler\SyslogHandler(
            $this->object->getChannel(), LogLevel::INFO
        );
        $this->object->addHandler($handler);

        $this->assertEquals(1, count($this->object->getHandlers()));

        // lowest level
        $this->assertFalse($this->object->isHandling(LogLevel::DEBUG));
        $this->assertTrue($this->object->isHandling(LogLevel::INFO));
    }

    /**
     * @covers Phossa\Logger\Logger::addHandler
     */
    public function testAddHandler2()
    {
        // add handler
        $handler = function($log) { };
        $this->object->addHandler($handler);

        $this->assertEquals(1, count($this->object->getHandlers()));

        // lowest level
        $this->assertFalse($this->object->isHandling(LogLevel::NOTICE));
        $this->assertTrue($this->object->isHandling(LogLevel::WARNING));
    }

    /**
     * @covers Phossa\Logger\Logger::addHandler
     * @_not_work_for_php7_expectedException PHPUnit_Framework_Error
     */
    public function testAddHandler3()
    {
        // non callable
        //$handler = 'test';
        //$this->object->addHandler($handler);
    }

    /**
     * @covers Phossa\Logger\Logger::getHandlers
     */
    public function testGetHandlers()
    {
        // get default handler
        $this->object->info('test');
        $ha = $this->object->getHandlers();

        $this->assertInstanceOf('Phossa\Logger\Handler\SyslogHandler', $ha[0]);
    }

    /**
     * @covers Phossa\Logger\Logger::setDecorators
     */
    public function testSetDecorators()
    {
        $decos = [
            new Decorator\InterpolateDecorator(),
            function($log) {
                return $log;
            }
        ];
        $this->object->setDecorators($decos);
        $this->assertEquals(2, count($this->object->getDecorators()));
    }

    /**
     * @covers Phossa\Logger\Logger::setDecorators
     * @expectedExceptionCode Phossa\Logger\Message\Message::INVALID_LOG_DECORATOR
     * @expectedException Phossa\Logger\Exception\InvalidArgumentException
     */
    public function testSetDecorators2()
    {
        // not callable
        $decos = [
            'bingo'
        ];
        $this->object->setDecorators($decos);
    }

    /**
     * @covers Phossa\Logger\Logger::addDecorator
     */
    public function testAddDecorator()
    {
        $this->object->addDecorator(function($log) {});
        $this->assertEquals(1, count($this->object->getDecorators()));
    }

    /**
     * @covers Phossa\Logger\Logger::addDecorator
     * @_not_work_for_php7_expectedException PHPUnit_Framework_Error
     */
    public function testAddDecorator2()
    {
        // non callable
        //$deco = 'test';
        //$this->object->addDecorator($deco);
    }

    /**
     * @covers Phossa\Logger\Logger::getDecorators
     */
    public function testGetDecorators()
    {
        // get default decorator
        $this->object->info('test');
        $da = $this->object->getDecorators();

        $this->assertInstanceOf(
            'Phossa\Logger\Decorator\InterpolateDecorator',
            $da[0]
        );
    }

    /**
     * @covers Phossa\Logger\Logger::log
     * @todo not ready yet
     */
    public function testLog()
    {
        $this->object->addHandler(new Handler\EchoHandler(LogLevel::WARNING));

        $this->expectOutputRegex('/ERROR: test wow/');

        $this->object->log(LogLevel::ERROR, 'test {bingo}', ['bingo' => 'wow']);
    }
}
