<?php
namespace Phossa\Logger;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-29 at 06:12:52.
 */
class LoggerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Logger
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Logger();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Phossa\Logger\Logger::setHandlers
     */
    public function testSetHandlers()
    {
        // callable
        $handlers = [
            new Handler\StreamHandler('test', LogLevel::ERROR),
            function($log) {
                return $log;
            }
        ];
        $this->object->setHandlers($handlers);
        $this->assertEquals(2, count($this->object->getHandlers()));
    }

    /**
     * @covers Phossa\Logger\Logger::setHandlers
     * @expectedExceptionCode Phossa\Logger\Message\Message::WRONG_LOG_HANDLER
     * @expectedException Phossa\Logger\Exception\InvalidArgumentException
     */
    public function testSetHandlers2()
    {
        // not callable
        $handlers = [
            'bingo'
        ];
        $this->object->setHandlers($handlers);
    }

    /**
     * @covers Phossa\Logger\Logger::getHandlers
     */
    public function testGetHandlers()
    {
        // get default handler
        $ha = $this->object->getHandlers();

        $this->assertInstanceOf('Phossa\Logger\Handler\StreamHandler', $ha[0]);
    }

    /**
     * @covers Phossa\Logger\Logger::setDecorators
     */
    public function testSetDecorators()
    {
        $decos = [
            new Decorator\InterpolateDecorator(),
            function($log) {
                return $log;
            }
        ];
        $this->object->setDecorators($decos);
        $this->assertEquals(2, count($this->object->getDecorators()));
    }

    /**
     * @covers Phossa\Logger\Logger::setHandlers
     * @expectedExceptionCode Phossa\Logger\Message\Message::WRONG_LOG_DECORATOR
     * @expectedException Phossa\Logger\Exception\InvalidArgumentException
     */
    public function testSetDecorators2()
    {
        // not callable
        $decos = [
            'bingo'
        ];
        $this->object->setDecorators($decos);
    }

    /**
     * @covers Phossa\Logger\Logger::getDecorators
     */
    public function testGetDecorators()
    {
        // get default decorator
        $da = $this->object->getDecorators();

        $this->assertInstanceOf('Phossa\Logger\Decorator\InterpolateDecorator', $da[0]);
    }

    /**
     * @covers Phossa\Logger\Logger::log
     * @todo not ready yet
     */
    public function testLog()
    {
        $this->object->log(LogLevel::ERROR, 'test {bingo}', ['bingo' => 'wow']);
    }
}
